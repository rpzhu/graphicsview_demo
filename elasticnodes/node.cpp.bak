#include "edge.h"
#include "node.h"
#include "graphwidget.h"
#include <QGraphicsScene>
#include <QGraphicsSceneMouseEvent>
#include <QPainter>
#include <QStyleOption>
#include <QDebug>

//结点
Node::Node(GraphWidget *graphWidget)
    : graph(graphWidget)
{
    setFlag(ItemIsMovable);//该项支持使用鼠标进行交互式移动。通过单击该项，然后拖动，该项将与鼠标光标一起移动
    setFlag(ItemSendsGeometryChanges);//必须启用此标志才能接收位置和转换更改的通知
    setCacheMode(DeviceCoordinateCache);
    setZValue(-1);
}

//为本结点添加边线
void Node::addEdge(Edge *edge)
{
    edgeList << edge;
    edge->adjust();
}

QList<Edge *> Node::edges() const
{
    return edgeList;
}

//计算拖动结点的力量
void Node::calculateForces()
{
    if (!scene() || scene()->mouseGrabberItem() == this)
    {
        newPos = pos();//新位置=旧位置
        return;
    }

    //汇总所有推动此结点项的力量--结点间的位置有关
    qreal xvel = 0;
    qreal yvel = 0;
    foreach (QGraphicsItem *item, scene()->items())//场景中所有结点图形项
    {
        Node *node = qgraphicsitem_cast<Node *>(item);
        if (!node)
        {
            continue;
        }

        QPointF vec = mapToItem(node, 0, 0);
        qreal dx = vec.x();
        qreal dy = vec.y();
        qDebug()<<"此图形项映射到场景的坐标："<<dx<<","<<dy;

        double l = 2.0 * (dx * dx + dy * dy);
        if (l > 0)
        {
            xvel += (dx * 150.0) / l;
            yvel += (dy * 150.0) / l;
        }
    }

    //汇总所有排斥此结点项的力量--边线的位置
    double weight = (edgeList.size() + 1) * 10;//权重
    foreach (Edge *edge, edgeList)//所有边线图形项
    {
        QPointF vec;
        if (edge->sourceNode() == this)
        {
            vec = mapToItem(edge->destNode(), 0, 0);//边线图形项映射到场景的坐标
        }
        else
        {
            vec = mapToItem(edge->sourceNode(), 0, 0);
        }
        xvel -= vec.x() / weight;
        yvel -= vec.y() / weight;
    }

    if (qAbs(xvel) < 0.1 && qAbs(yvel) < 0.1)
    {
        xvel = yvel = 0;
    }

    //设置结点新的位置
    QRectF sceneRect = scene()->sceneRect();
    newPos = pos() + QPointF(xvel, yvel);
    newPos.setX(qMin(qMax(newPos.x(), sceneRect.left() + 10), sceneRect.right() - 10));
    newPos.setY(qMin(qMax(newPos.y(), sceneRect.top() + 10), sceneRect.bottom() - 10));
}

bool Node::advance()
{
    if (newPos == pos())
    {
        return false;
    }

    setPos(newPos);
    return true;
}

QRectF Node::boundingRect() const
{
    qreal adjust = 2;
    return QRectF( -10 - adjust, -10 - adjust, 23 + adjust, 23 + adjust);
}

QPainterPath Node::shape() const
{
    QPainterPath path;
    path.addEllipse(-10, -10, 20, 20);
    return path;
}

void Node::paint(QPainter *painter, const QStyleOptionGraphicsItem *option, QWidget *)
{
    painter->setPen(Qt::NoPen);
    painter->setBrush(Qt::darkGray);
    painter->drawEllipse(-7, -7, 20, 20);

    QRadialGradient gradient(-3, -3, 10);//辐射渐变
    if (option->state & QStyle::State_Sunken)//按下了图形项
    {
        gradient.setCenter(3, 3);
        gradient.setFocalPoint(3, 3);
        gradient.setColorAt(1, QColor(Qt::yellow).light(120));
        gradient.setColorAt(0, QColor(Qt::darkYellow).light(120));
        qDebug()<<"按下";
    }
    else
    {
        gradient.setColorAt(0, Qt::yellow);
        gradient.setColorAt(1, Qt::darkYellow);
    }
    painter->setBrush(gradient);

    painter->setPen(QPen(Qt::black, 0));
    painter->drawEllipse(-10, -10, 20, 20);
}

QVariant Node::itemChange(GraphicsItemChange change, const QVariant &value)
{
    switch (change)
    {
        case ItemPositionHasChanged://当结点的位置改变时
            foreach (Edge *edge, edgeList)//边线的位置也自动调整
            {
                edge->adjust();
            }
            graph->itemMoved();
            break;
        default:
            break;
    };

    return QGraphicsItem::itemChange(change, value);
}

//按下松开都刷新
void Node::mousePressEvent(QGraphicsSceneMouseEvent *event)
{
    update();
    QGraphicsItem::mousePressEvent(event);
}

void Node::mouseReleaseEvent(QGraphicsSceneMouseEvent *event)
{
    update();
    QGraphicsItem::mouseReleaseEvent(event);
}
